name: Build APKs
on:
  workflow_dispatch:
  schedule:
    - cron: '00 0 * * *'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [armeabi-v7a, arm64-v8a, x86_64]
    steps:
      - name: Install jq
        run: |
          sudo apt update
          sudo apt install -y jq
      
      - name: Get latest IronFox version
        id: version
        run: |
          LATEST_RELEASE=$(curl -s https://gitlab.com/api/v4/projects/ironfox-oss%2FIronFox/releases | jq -r '.[0]')
          VERSION=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          DESCRIPTION=$(echo "$LATEST_RELEASE" | jq -r '.description' | sed '/## Checksums/,/This release was automatically generated/d')
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$DESCRIPTION" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "APK_NAME=IronFox-${VERSION}-${{ matrix.variant }}.apk" >> $GITHUB_ENV
          echo "APK_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets.links[] | select(.name | endswith("'"-${{ matrix.variant }}.apk"'")) | .url')" >> $GITHUB_ENV
  
      - name: Get latest release info
        id: getLatest
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true

      - name: Check if latest version was already built
        id: check-release
        if: ${{ steps.getLatest.outputs.tag_name == env.BUILD_VERSION }}
        run: |
          echo "${{ env.BUILD_VERSION }} already released"
          echo "skip=true" >> $GITHUB_OUTPUT

      - name: Install dependencies
        if: steps.check-release.outputs.skip != 'true'
        run: |
          sudo apt install -y wget zipalign apksigner
      
      - name: Download APK
        if: steps.check-release.outputs.skip != 'true'
        run: |
          wget "${{ env.APK_URL }}" -O latest.apk
      
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Run build script
        if: steps.check-release.outputs.skip != 'true'
        run: |
          cd ${{ github.workspace }}
          chmod +x ./build.sh
          ./build.sh ${{ matrix.variant }}
          mv patched_signed.apk ${{ env.APK_NAME }}
      
      - name: Publish release
        if: steps.check-release.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          files: ${{ github.workspace }}/${{ env.APK_NAME }}
